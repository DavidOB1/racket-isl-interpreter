(define (add1 n) (+ n 1))
(define (sub1 n) (- n 1))
(define (sqr n) (* n n))
(define (abs n) (if (< n 0) (* n -1) n))
(define (max n1 n2) (if (> n1 n2) n1 n2))
(define (min n1 n2) (if (< n1 n2) n1 n2))
(define (negative? n) (< n 0))
(define (positive? n) (> n 0))
(define (sgn n) (if (< n 0) -1 1))

(define-struct posn [x y])

(define head first)
(define tail rest)
(define car first)
(define cdr rest)
(define (second l)
	(first (rest l)))
(define (third l)
	(first (rest (rest l))))
(define (fourth l)
	(first (rest (rest (rest l)))))
(define (reverse l)
   (rev-helper l empty))
(define (rev-helper l acc)
	(if (empty? l)
		acc
		(rev-helper (rest l) (cons (first l) acc))))
(define (map f lox)
	(if (empty? lox)
		empty
		(cons (f (first lox)) (map f (rest lox)))))
(define (ormap p lox)
	(if (empty? lox)
		false
		(or (p (first lox)) (ormap p (rest lox)))))
(define (andmap p lox)
	(if (empty? lox)
		true
		(and (p (first lox)) (andmap p (rest lox)))))
(define (filter p lox)
	(if (empty? lox)
		empty
		(if (p (first lox))
			(cons (first lox)
				(filter p (rest lox)))
			(filter p (rest lox)))))
(define (foldr f base lox)
	(if (empty? lox)
		base
		(f (first lox)
		   (foldr f base (rest lox)))))
(define (foldl f base lox)
	(foldr f base (reverse lox)))
(define (build-list n f)
	(build-list-helper (sub1 n) f empty))
(define (build-list-helper n f acc)
	(if (< n 0)
		acc
		(build-list-helper (sub1 n) f (cons (f n) acc))))
(define (list? l)
	(or (empty? l) (cons? l)))	   
		 